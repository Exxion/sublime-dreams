{
    "fileTypes": [
        "dm", 
        "dme"
    ], 
    "foldingStartMarker": "(?x)\n\t\t /\\*\\*(?!\\*)\n\t\t|^(?![^{]*?//|[^{]*?/\\*(?!.*?\\*/.*?\\{)).*?\\{\\s*($|//|/\\*(?!.*?\\*/.*\\S))\n\t", 
    "foldingStopMarker": "(?<!\\*)\\*\\*/|^\\s*\\}", 
    "keyEquivalent": "^~C", 
    "name": "Dream Maker", 
    "patterns": [
        {
            "include": "#preprocessor-rule-enabled"
        }, 
        {
            "include": "#preprocessor-rule-disabled"
        }, 
        {
            "include": "#preprocessor-rule-other"
        }, 
        {
            "include": "#comments"
        },  
        {
            "match": "\\b((0(x|X)[0-9a-fA-F]*)|(([0-9]+\\.?[0-9]*)|(\\.[0-9]+))((e|E)(\\+|-)?[0-9]+)?)(L|l|UL|ul|u|U|F|f|ll|LL|ull|ULL)?\\b", 
            "name": "constant.numeric.dm"
        }, 
        {
            "match": "\\b(sleep|spawn|break|continue|do|else|for|goto|if|return|switch|while|del|new|to|in|step)\\b", 
            "name": "keyword.control.dm"
        }, 
        {
            "match": "\\b(var|arg|proc|verb)\\b", 
            "name": "storage.type.dm"
        }, 
        {
            "match": "\\b(as|const|global|set|static|tmp)\\b", 
            "name": "storage.modifier.dm"
        }, 
        {
            "match": "\\b(usr|world|src|datum|atom(/movable)?|obj|mob|turf|area|savefile|list|client|sound|image)\\b", 
            "name": "variable.language.dm"
        }, 
        {
            "match": "\\b( \\? | (> | <)(=)? | \\. | : | /(=)? | ~ | \\+(\\+|=)? | -(-|=)? | \\*(\\*|=)? | % | >> | << | =(=)? | !(=)? || <> | & | && | \\^ | \\| | \\|\\| )\\b", 
            "name": "keyword.operator.dm"
        }, 
        {
            "match": "\\b([A-Z_]+)\\b", 
            "name": "constant.language.dm"
        },
        {
            "begin": "\"", 
            "beginCaptures": {
                "0": {
                    "name": "punctuation.definition.string.begin.dm"
                }
            }, 
            "end": "\"", 
            "endCaptures": {
                "0": {
                    "name": "punctuation.definition.string.end.dm"
                }
            }, 
            "name": "string.quoted.double.dm", 
            "patterns": [
                {
                    "include": "#string_escaped_char"
                }, 
                {
                    "include": "#string_embedded_expression"
                }
            ]
        }, 
        {
            "begin": "'", 
            "beginCaptures": {
                "0": {
                    "name": "punctuation.definition.string.begin.dm"
                }
            }, 
            "end": "'", 
            "endCaptures": {
                "0": {
                    "name": "punctuation.definition.string.end.dm"
                }
            }, 
            "name": "string.quoted.single.dm", 
            "patterns": [
                {
                    "include": "#string_escaped_char"
                }
            ]
        }, 
        {
            "begin": "(?x)\n        \t\t^\\s*\\#\\s*(define)\\s+             # define\n        \t\t((?<id>[a-zA-Z_][a-zA-Z0-9_]*))  # macro name\n        \t\t(?:                              # and optionally:\n        \t\t    (\\()                         # an open parenthesis\n        \t\t        (\n        \t\t            \\s* \\g<id> \\s*       # first argument\n        \t\t            ((,) \\s* \\g<id> \\s*)*  # additional arguments\n        \t\t            (?:\\.\\.\\.)?          # varargs ellipsis?\n        \t\t        )\n        \t\t    (\\))                         # a close parenthesis\n        \t\t)?\n        \t", 
            "beginCaptures": {
                "1": {
                    "name": "keyword.control.import.define.dm"
                }, 
                "2": {
                    "name": "entity.name.function.preprocessor.dm"
                }, 
                "4": {
                    "name": "punctuation.definition.parameters.dm"
                }, 
                "5": {
                    "name": "variable.parameter.preprocessor.dm"
                }, 
                "7": {
                    "name": "punctuation.separator.parameters.dm"
                }, 
                "8": {
                    "name": "punctuation.definition.parameters.dm"
                }
            }, 
            "end": "(?=(?://|/\\*))|$", 
            "name": "meta.preprocessor.macro.dm", 
            "patterns": [
                {
                    "match": "(?>\\\\\\s*\\n)", 
                    "name": "punctuation.separator.continuation.dm"
                }, 
                {
                    "include": "$base"
                }
            ]
        }, 
        {
            "begin": "^\\s*#\\s*(error|warning)\\b", 
            "captures": {
                "1": {
                    "name": "keyword.control.import.error.dm"
                }
            }, 
            "end": "$", 
            "name": "meta.preprocessor.diagnostic.dm", 
            "patterns": [
                {
                    "match": "(?>\\\\\\s*\\n)", 
                    "name": "punctuation.separator.continuation.dm"
                }
            ]
        }, 
        {
            "include": "#pragma-mark"
        }, 
        {
            "begin": "^\\s*#\\s*(define|defined|elif|else|if|ifdef|ifndef|line|pragma|include|undef)\\b", 
            "captures": {
                "1": {
                    "name": "keyword.control.import.dm"
                }
            }, 
            "end": "(?=(?://|/\\*))|$", 
            "name": "meta.preprocessor.dm", 
            "patterns": [
                {
                    "match": "(?>\\\\\\s*\\n)", 
                    "name": "punctuation.separator.continuation.dm"
                }
            ]
        }, 
        {
            "include": "#block"
        }, 
        {
            "begin": "(?x)\n    \t\t(?:  ^                                 # begin-of-line\n    \t\t  |\n    \t\t     (?: (?= \\s )           (?<!else|new|return) (?<=\\w)      #  or word + space before name\n    \t\t       | (?= \\s*[A-Za-z_] ) (?<!&&)       (?<=[*&>])   #  or type modifier before name\n    \t\t     )\n    \t\t)\n    \t\t(\\s*) (?!(while|for|do|if|else|switch|catch|enumerate|return|r?iterate)\\s*\\()\n    \t\t(\n    \t\t\t(?: [A-Za-z_][A-Za-z0-9_]*+ | :: )++ |                  # actual name\n    \t\t\t(?: (?<=operator) (?: [-*&<>=+!]+ | \\(\\) | \\[\\] ) )  # if it is a C++ operator\n    \t\t)\n    \t\t \\s*(?=\\()", 
            "beginCaptures": {
                "1": {
                    "name": "punctuation.whitespace.function.leading.dm"
                }, 
                "3": {
                    "name": "entity.name.function.dm"
                }, 
                "4": {
                    "name": "punctuation.definition.parameters.dm"
                }
            }, 
            "end": "(?<=\\})|(?=#)|(;)?", 
            "name": "meta.function.dm", 
            "patterns": [
                {
                    "include": "#comments"
                }, 
                {
                    "include": "#parens"
                }, 
                {
                    "match": "\\bconst\\b", 
                    "name": "storage.modifier.dm"
                }, 
                {
                    "include": "#block"
                }
            ]
        }
    ], 
    "repository": {
        "access": {
            "match": "\\.[a-zA-Z_][a-zA-Z_0-9]*\\b(?!\\s*\\()", 
            "name": "variable.other.dot-access.dm"
        }, 
        "block": {
            "begin": "\\{", 
            "end": "\\}", 
            "name": "meta.block.dm", 
            "patterns": [
                {
                    "include": "#block_innards"
                }
            ]
        }, 
        "block_innards": {
            "patterns": [
                {
                    "include": "#preprocessor-rule-enabled-block"
                }, 
                {
                    "include": "#preprocessor-rule-disabled-block"
                }, 
                {
                    "include": "#preprocessor-rule-other-block"
                }, 
                {
                    "include": "#access"
                }, 
                {
                    "captures": {
                        "1": {
                            "name": "punctuation.whitespace.function-call.leading.dm"
                        }, 
                        "2": {
                            "name": "support.function.any-method.dm"
                        }, 
                        "3": {
                            "name": "punctuation.definition.parameters.dm"
                        }
                    }, 
                    "match": "(?x) (?: (?= \\s )  (?:(?<=else|new|return) | (?<!\\w)) (\\s+))?\n\t\t\t(\\b\n\t\t\t\t(?!(while|for|do|if|else|switch|catch|enumerate|return|r?iterate)\\s*\\()(?:(?!NS)[A-Za-z_][A-Za-z0-9_]*+\\b | :: )++                  # actual name\n\t\t\t)\n\t\t\t \\s*(\\()", 
                    "name": "meta.function-call.dm"
                }, 
                {
                    "captures": {
                        "1": {
                            "name": "variable.other.dm"
                        }, 
                        "2": {
                            "name": "punctuation.definition.parameters.dm"
                        }
                    }, 
                    "match": "(?x)\n\t\t\t        (?x)\n\t\t\t(?:\n\t\t\t     (?: (?= \\s )           (?<!else|new|return) (?<=\\w)\\s+      #  or word + space before name\n\t\t\t     )\n\t\t\t)\n\t\t\t(\n\t\t\t\t(?: [A-Za-z_][A-Za-z0-9_]*+ | :: )++    |              # actual name\n\t\t\t\t(?: (?<=operator) (?: [-*&<>=+!]+ | \\(\\) | \\[\\] ) )?  # if it is a C++ operator\n\t\t\t)\n\t\t\t \\s*(\\()", 
                    "name": "meta.initialization.dm"
                }, 
                {
                    "include": "#block"
                }, 
                {
                    "include": "$base"
                }
            ]
        }, 
        "comments": {
            "patterns": [
                {
                    "captures": {
                        "1": {
                            "name": "meta.toc-list.banner.block.dm"
                        }
                    }, 
                    "match": "^/\\* =(\\s*.*?)\\s*= \\*/$\\n?", 
                    "name": "comment.block.dm"
                }, 
                {
                    "begin": "/\\*", 
                    "captures": {
                        "0": {
                            "name": "punctuation.definition.comment.dm"
                        }
                    }, 
                    "end": "\\*/", 
                    "name": "comment.block.dm"
                }, 
                {
                    "match": "\\*/.*\\n", 
                    "name": "invalid.illegal.stray-comment-end.dm"
                }, 
                {
                    "captures": {
                        "1": {
                            "name": "meta.toc-list.banner.line.dm"
                        }
                    }, 
                    "match": "^// =(\\s*.*?)\\s*=\\s*$\\n?", 
                    "name": "comment.line.banner.dm"
                }, 
                {
                    "begin": "//", 
                    "beginCaptures": {
                        "0": {
                            "name": "punctuation.definition.comment.dm"
                        }
                    }, 
                    "end": "$\\n?", 
                    "name": "comment.line.double-slash.dm", 
                    "patterns": [
                        {
                            "match": "(?>\\\\\\s*\\n)", 
                            "name": "punctuation.separator.continuation.dm"
                        }
                    ]
                }
            ]
        }, 
        "disabled": {
            "begin": "^\\s*#\\s*if(n?def)?\\b.*$", 
            "comment": "eat nested preprocessor if(def)s", 
            "end": "^\\s*#\\s*endif\\b.*$", 
            "patterns": [
                {
                    "include": "#disabled"
                }, 
                {
                    "include": "#pragma-mark"
                }
            ]
        }, 
        "parens": {
            "begin": "\\(", 
            "end": "\\)", 
            "name": "meta.parens.dm", 
            "patterns": [
                {
                    "include": "$base"
                }
            ]
        }, 
        "pragma-mark": {
            "captures": {
                "1": {
                    "name": "meta.preprocessor.dm"
                }, 
                "2": {
                    "name": "keyword.control.import.pragma.dm"
                }, 
                "3": {
                    "name": "meta.toc-list.pragma-mark.dm"
                }
            }, 
            "match": "^\\s*(#\\s*(pragma\\s+mark)\\s+(.*))", 
            "name": "meta.section"
        }, 
        "preprocessor-rule-disabled": {
            "begin": "^\\s*(#(if)\\s+(0)\\b).*", 
            "captures": {
                "1": {
                    "name": "meta.preprocessor.dm"
                }, 
                "2": {
                    "name": "keyword.control.import.if.dm"
                }, 
                "3": {
                    "name": "constant.numeric.preprocessor.dm"
                }
            }, 
            "end": "^\\s*(#\\s*(endif)\\b)", 
            "patterns": [
                {
                    "begin": "^\\s*(#\\s*(else)\\b)", 
                    "captures": {
                        "1": {
                            "name": "meta.preprocessor.dm"
                        }, 
                        "2": {
                            "name": "keyword.control.import.else.dm"
                        }
                    }, 
                    "end": "(?=^\\s*#\\s*endif\\b.*$)", 
                    "patterns": [
                        {
                            "include": "$base"
                        }
                    ]
                }, 
                {
                    "begin": "", 
                    "end": "(?=^\\s*#\\s*(else|endif)\\b.*$)", 
                    "name": "comment.block.preprocessor.if-branch", 
                    "patterns": [
                        {
                            "include": "#disabled"
                        }, 
                        {
                            "include": "#pragma-mark"
                        }
                    ]
                }
            ]
        }, 
        "preprocessor-rule-disabled-block": {
            "begin": "^\\s*(#(if)\\s+(0)\\b).*", 
            "captures": {
                "1": {
                    "name": "meta.preprocessor.dm"
                }, 
                "2": {
                    "name": "keyword.control.import.if.dm"
                }, 
                "3": {
                    "name": "constant.numeric.preprocessor.dm"
                }
            }, 
            "end": "^\\s*(#\\s*(endif)\\b)", 
            "patterns": [
                {
                    "begin": "^\\s*(#\\s*(else)\\b)", 
                    "captures": {
                        "1": {
                            "name": "meta.preprocessor.dm"
                        }, 
                        "2": {
                            "name": "keyword.control.import.else.dm"
                        }
                    }, 
                    "end": "(?=^\\s*#\\s*endif\\b.*$)", 
                    "patterns": [
                        {
                            "include": "#block_innards"
                        }
                    ]
                }, 
                {
                    "begin": "", 
                    "end": "(?=^\\s*#\\s*(else|endif)\\b.*$)", 
                    "name": "comment.block.preprocessor.if-branch.in-block", 
                    "patterns": [
                        {
                            "include": "#disabled"
                        }, 
                        {
                            "include": "#pragma-mark"
                        }
                    ]
                }
            ]
        }, 
        "preprocessor-rule-enabled": {
            "begin": "^\\s*(#(if)\\s+(0*1)\\b)", 
            "captures": {
                "1": {
                    "name": "meta.preprocessor.dm"
                }, 
                "2": {
                    "name": "keyword.control.import.if.dm"
                }, 
                "3": {
                    "name": "constant.numeric.preprocessor.dm"
                }
            }, 
            "end": "^\\s*(#\\s*(endif)\\b)", 
            "patterns": [
                {
                    "begin": "^\\s*(#\\s*(else)\\b).*", 
                    "captures": {
                        "1": {
                            "name": "meta.preprocessor.dm"
                        }, 
                        "2": {
                            "name": "keyword.control.import.else.dm"
                        }
                    }, 
                    "contentName": "comment.block.preprocessor.else-branch", 
                    "end": "(?=^\\s*#\\s*endif\\b.*$)", 
                    "patterns": [
                        {
                            "include": "#disabled"
                        }, 
                        {
                            "include": "#pragma-mark"
                        }
                    ]
                }, 
                {
                    "begin": "", 
                    "end": "(?=^\\s*#\\s*(else|endif)\\b.*$)", 
                    "patterns": [
                        {
                            "include": "$base"
                        }
                    ]
                }
            ]
        }, 
        "preprocessor-rule-enabled-block": {
            "begin": "^\\s*(#(if)\\s+(0*1)\\b)", 
            "captures": {
                "1": {
                    "name": "meta.preprocessor.dm"
                }, 
                "2": {
                    "name": "keyword.control.import.if.dm"
                }, 
                "3": {
                    "name": "constant.numeric.preprocessor.dm"
                }
            }, 
            "end": "^\\s*(#\\s*(endif)\\b)", 
            "patterns": [
                {
                    "begin": "^\\s*(#\\s*(else)\\b).*", 
                    "captures": {
                        "1": {
                            "name": "meta.preprocessor.dm"
                        }, 
                        "2": {
                            "name": "keyword.control.import.else.dm"
                        }
                    }, 
                    "contentName": "comment.block.preprocessor.else-branch.in-block", 
                    "end": "(?=^\\s*#\\s*endif\\b.*$)", 
                    "patterns": [
                        {
                            "include": "#disabled"
                        }, 
                        {
                            "include": "#pragma-mark"
                        }
                    ]
                }, 
                {
                    "begin": "", 
                    "end": "(?=^\\s*#\\s*(else|endif)\\b.*$)", 
                    "patterns": [
                        {
                            "include": "#block_innards"
                        }
                    ]
                }
            ]
        }, 
        "preprocessor-rule-other": {
            "begin": "^\\s*(#\\s*(if(n?def)?)\\b.*?(?:(?=(?://|/\\*))|$))", 
            "captures": {
                "1": {
                    "name": "meta.preprocessor.dm"
                }, 
                "2": {
                    "name": "keyword.control.import.dm"
                }
            }, 
            "end": "^\\s*(#\\s*(endif)\\b).*$", 
            "patterns": [
                {
                    "include": "$base"
                }
            ]
        }, 
        "preprocessor-rule-other-block": {
            "begin": "^\\s*(#\\s*(if(n?def)?)\\b.*?(?:(?=(?://|/\\*))|$))", 
            "captures": {
                "1": {
                    "name": "meta.preprocessor.dm"
                }, 
                "2": {
                    "name": "keyword.control.import.dm"
                }
            }, 
            "end": "^\\s*(#\\s*(endif)\\b).*$", 
            "patterns": [
                {
                    "include": "#block_innards"
                }
            ]
        }, 
        "string_embedded_expression": {
            "patterns": [
                {
                    "begin": "(?<!\\\\)\\[", 
                    "end": "\\]", 
                    "name": "string.interpolated.dm", 
                    "patterns": [
                        {
                            "include": "$self"
                        }
                    ]
                }
            ]
        }, 
        "string_escaped_char": {
            "patterns": [
                {
                    "match": "\\\\(\\\\|[\\[abefnprtv'\"?]|[0-3]\\d{,2}|[4-7]\\d?|x[a-fA-F0-9]{,2}|u[a-fA-F0-9]{,4}|U[a-fA-F0-9]{,8})", 
                    "name": "constant.character.escape.dm"
                }, 
                {
                    "match": "\\\\.", 
                    "name": "invalid.illegal.unknown-escape.dm"
                }
            ]
        }
    }, 
    "scopeName": "source.dm", 
    "uuid": "25066DC2-6B1D-11D9-9D5B-000D93589AF6"
}